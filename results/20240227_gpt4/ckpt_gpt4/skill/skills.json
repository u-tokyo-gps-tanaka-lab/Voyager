{"mineWoodLog": {"code": "async function mineWoodLog(bot) {\n  // Explore until find a wood log\n  const log = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const log = bot.findBlock({\n      matching: block => {\n        return [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"].includes(block.name);\n      },\n      maxDistance: 32\n    });\n    return log;\n  });\n  if (log) {\n    // Mine the wood log\n    await mineBlock(bot, log.name, 1);\n  } else {\n    bot.chat(\"No wood log found within the exploration range.\");\n  }\n}", "description": "async function mineWoodLog(bot) {\n    // The function is about mining a single wood log. It explores the environment until finding a wood log block, which includes various types of wood logs. If a wood log is found, it proceeds to mine that specific log block. If no wood log is found within the exploration range, it notifies the player that no wood log was found.\n}"}, "craftBirchPlanks": {"code": "async function craftBirchPlanks(bot) {\n  // Check if the bot has a crafting table\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n\n  // If the bot doesn't have a crafting table, craft one\n  if (!craftingTable) {\n    await craftItem(bot, \"crafting_table\", 1);\n    craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  }\n\n  // Place the crafting table\n  const placePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", placePosition);\n\n  // Craft the birch planks\n  await craftItem(bot, \"birch_planks\", 1);\n}", "description": "async function craftBirchPlanks(bot) {\n    // The function crafts birch planks by first checking for a crafting table in the bot's inventory and crafting one if it's not available. It then places the crafting table at a position offset from the bot's current location. Finally, it crafts birch planks using the crafting table.\n}"}, "craftCraftingTable": {"code": "async function craftCraftingTable(bot) {\n  // Craft the crafting table\n  await craftItem(bot, \"crafting_table\", 1);\n}", "description": "async function craftCraftingTable(bot) {\n    // The function crafts a crafting table by calling another function to craft an item named \"crafting_table\" once.\n}"}, "craftWoodenPickaxe": {"code": "async function craftWoodenPickaxe(bot) {\n  // Check if the bot has a birch log\n  let birchLog = bot.inventory.findInventoryItem(mcData.itemsByName[\"birch_log\"].id);\n\n  // If the bot doesn't have a birch log, mine one\n  if (!birchLog) {\n    await mineBlock(bot, \"birch_log\", 1);\n    birchLog = bot.inventory.findInventoryItem(mcData.itemsByName[\"birch_log\"].id);\n  }\n\n  // Craft birch planks from the birch log\n  await craftItem(bot, \"birch_planks\", 1);\n  const birchPlanks = bot.inventory.findInventoryItem(mcData.itemsByName[\"birch_planks\"].id);\n\n  // Craft sticks from the birch planks\n  await craftItem(bot, \"stick\", 1);\n  const sticks = bot.inventory.findInventoryItem(mcData.itemsByName[\"stick\"].id);\n\n  // Check if the bot has a crafting table\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n\n  // If the bot doesn't have a crafting table, craft one\n  if (!craftingTable) {\n    await craftItem(bot, \"crafting_table\", 1);\n    craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  }\n\n  // Find a suitable position to place the crafting table\n  const placePosition = bot.entity.position.offset(1, -1, 0);\n\n  // Place the crafting table\n  await placeItem(bot, \"crafting_table\", placePosition);\n\n  // Craft a wooden pickaxe from the birch planks and sticks\n  await craftItem(bot, \"wooden_pickaxe\", 1);\n}", "description": "async function craftWoodenPickaxe(bot) {\n    // The function crafts a wooden pickaxe by first checking for a birch log in the bot's inventory and mining one if not available. It then crafts birch planks and sticks from the birch log, ensuring the presence of a crafting table by crafting one if needed. After placing the crafting table at a suitable position, it proceeds to craft a wooden pickaxe using the birch planks and sticks.\n}"}, "mineCoalOre": {"code": "async function mineCoalOre(bot) {\n  // Find a coal ore block\n  const coalOre = bot.findBlock({\n    matching: mcData.blocksByName[\"coal_ore\"].id,\n    maxDistance: 32\n  });\n  if (coalOre) {\n    // Equip the wooden pickaxe\n    const woodenPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"wooden_pickaxe\"].id);\n    await bot.equip(woodenPickaxe, \"hand\");\n\n    // Mine the coal ore block\n    await mineBlock(bot, \"coal_ore\", 1);\n  } else {\n    bot.chat(\"No coal ore found within the search range.\");\n  }\n}", "description": "async function mineCoalOre(bot) {\n    // The function is focused on mining a single coal ore block using a wooden pickaxe. It begins by searching for a coal ore block within a maximum distance of 32 blocks. If a coal ore block is found, it equips a wooden pickaxe from the inventory and proceeds to mine the coal ore block. If no coal ore block is found within the search range, it sends a message indicating the absence of coal ore.\n}"}, "mineOneCoalOre": {"code": "async function mineOneCoalOre(bot) {\n  // Find a coal ore block\n  const coalOre = bot.findBlock({\n    matching: mcData.blocksByName[\"coal_ore\"].id,\n    maxDistance: 32\n  });\n  if (coalOre) {\n    // Equip the wooden pickaxe\n    const woodenPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"wooden_pickaxe\"].id);\n    await bot.equip(woodenPickaxe, \"hand\");\n\n    // Mine the coal ore block\n    await mineBlock(bot, \"coal_ore\", 1);\n  } else {\n    bot.chat(\"No coal ore found within the search range.\");\n  }\n}", "description": "async function mineOneCoalOre(bot) {\n    // The function searches for a coal ore block within a certain distance. If a coal ore block is found, it equips a wooden pickaxe and mines the coal ore block. If no coal ore block is found, it notifies the player that there is no coal ore within the search range.\n}"}, "craftStonePickaxe": {"code": "async function craftStonePickaxe(bot) {\n  // Mine 3 stone blocks\n  await mineBlock(bot, \"stone\", 3);\n\n  // Check if the bot has a crafting table\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n\n  // If the bot doesn't have a crafting table, craft one\n  if (!craftingTable) {\n    await craftItem(bot, \"crafting_table\", 1);\n    craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  }\n\n  // Find a suitable position to place the crafting table\n  const placePosition = bot.entity.position.offset(1, -1, 0);\n\n  // Place the crafting table\n  await placeItem(bot, \"crafting_table\", placePosition);\n\n  // Craft a stone pickaxe from the stone blocks and sticks\n  await craftItem(bot, \"stone_pickaxe\", 1);\n}", "description": "async function craftStonePickaxe(bot) {\n    // The function crafts a stone pickaxe by first mining 3 stone blocks. It then checks if the bot has a crafting table; if not, it crafts one. After finding a suitable position, it places the crafting table and proceeds to craft a stone pickaxe using the mined stone blocks and sticks.\n}"}, "mineFiveCoalOres": {"code": "async function mineFiveCoalOres(bot) {\n  // Check if the bot has a pickaxe\n  let pickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"wooden_pickaxe\"].id);\n  if (!pickaxe) {\n    // If not, craft a wooden pickaxe\n    await craftItem(bot, \"wooden_pickaxe\", 1);\n    pickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"wooden_pickaxe\"].id);\n  }\n\n  // Equip the pickaxe\n  await bot.equip(pickaxe, \"hand\");\n  for (let i = 0; i < 5; i++) {\n    // Explore until find a coal ore\n    const coalOre = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n      const coalOre = bot.findBlock({\n        matching: mcData.blocksByName[\"coal_ore\"].id,\n        maxDistance: 32\n      });\n      return coalOre;\n    });\n\n    // If a coal ore is found, mine it\n    if (coalOre) {\n      await mineBlock(bot, \"coal_ore\", 1);\n      bot.chat(`Mined ${i + 1} coal ores.`);\n    } else {\n      bot.chat(\"No coal ore found within the exploration range.\");\n      break;\n    }\n  }\n}", "description": "async function mineFiveCoalOres(bot) {\n    // The function is focused on mining five coal ores using a pickaxe. It first checks if the bot has a pickaxe, crafting one if it doesn't. The pickaxe is then equipped for mining. It iterates five times to explore the environment until finding a coal ore. Upon finding a coal ore, it mines it and informs the number of coal ores mined. If no coal ore is found within the exploration range, it notifies the absence of coal ore and stops the process.\n}"}, "mineIronOre": {"code": "async function mineIronOre(bot) {\n  // Explore until find an iron ore\n  const ironOre = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n    const ironOre = bot.findBlock({\n      matching: mcData.blocksByName[\"iron_ore\"].id,\n      maxDistance: 32\n    });\n    return ironOre;\n  });\n  if (ironOre) {\n    // Mine the iron ore\n    await mineBlock(bot, \"iron_ore\", 1);\n    bot.chat(\"Mined 1 iron ore.\");\n  } else {\n    bot.chat(\"No iron ore found within the exploration range.\");\n  }\n}", "description": "async function mineIronOre(bot) {\n    // The function is focused on mining a single iron ore block. It involves exploring the surroundings until locating an iron ore block within a specified range. Upon finding the iron ore, the bot mines it and sends a message confirming the successful mining of one iron ore. If no iron ore is found within the exploration range, the bot notifies the absence of iron ore.\n}"}, "smeltRawIron": {"code": "async function smeltRawIron(bot) {\n  // Check if the bot has a furnace\n  let furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n\n  // If the bot doesn't have a furnace, mine 8 cobblestone and craft one\n  if (!furnace) {\n    await mineBlock(bot, \"cobblestone\", 8);\n    await craftItem(bot, \"furnace\", 1);\n    furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n  }\n\n  // Find a suitable position to place the furnace\n  let placePositionFurnace = bot.entity.position.offset(1, -1, 0);\n\n  // Try to place the furnace, if it fails, try another position\n  try {\n    await placeItem(bot, \"furnace\", placePositionFurnace);\n  } catch (error) {\n    placePositionFurnace = bot.entity.position.offset(-1, -1, 0);\n    await placeItem(bot, \"furnace\", placePositionFurnace);\n  }\n\n  // Mine 1 block of coal for fuel\n  await mineBlock(bot, \"coal_ore\", 1);\n\n  // Smelt the raw iron using the coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 2);\n}", "description": "async function smeltRawIron(bot) {\n    // The function is about smelting raw iron into iron ingots using a furnace and coal as fuel. It first checks if the bot has a furnace; if not, it mines cobblestone to craft one. After finding a suitable position, it attempts to place the furnace, trying another position if the first fails. Then, it mines a block of coal for fuel. Finally, it smelts the raw iron using coal as fuel to produce iron ingots.\n}"}, "mineThreeIronOres": {"code": "async function mineThreeIronOres(bot) {\n  for (let i = 0; i < 3; i++) {\n    // Find an iron ore block\n    const ironOre = bot.findBlock({\n      matching: mcData.blocksByName[\"iron_ore\"].id,\n      maxDistance: 32\n    });\n    if (ironOre) {\n      // Equip the stone pickaxe\n      const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"stone_pickaxe\"].id);\n      await bot.equip(stonePickaxe, \"hand\");\n\n      // Mine the iron ore block\n      await mineBlock(bot, \"iron_ore\", 1);\n      bot.chat(`Mined ${i + 1} iron ore.`);\n    } else {\n      bot.chat(\"No iron ore found within the search range.\");\n      break;\n    }\n  }\n}", "description": "async function mineThreeIronOres(bot) {\n    // The function is about mining three iron ores using a stone pickaxe. It iterates three times to find and mine iron ore blocks within a certain distance. If an iron ore block is found, it equips the stone pickaxe and mines the block, then notifies the number of iron ores mined. If no iron ore is found within the search range, it stops the iteration and informs the absence of iron ore.\n}"}, "craftIronPickaxe": {"code": "async function craftIronPickaxe(bot) {\n  // Check if the bot has a furnace\n  let furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n\n  // If the bot doesn't have a furnace, mine 8 cobblestone and craft one\n  if (!furnace) {\n    await mineBlock(bot, \"cobblestone\", 8);\n    await craftItem(bot, \"furnace\", 1);\n    furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n  }\n\n  // Find a suitable position to place the furnace\n  const placePositionFurnace = bot.entity.position.offset(2, -1, 0);\n\n  // Place the furnace\n  await placeItem(bot, \"furnace\", placePositionFurnace);\n\n  // Smelt the raw iron using the coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 2);\n\n  // Check if the bot has a crafting table\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n\n  // If the bot doesn't have a crafting table, mine 1 birch log and craft one\n  if (!craftingTable) {\n    await mineBlock(bot, \"birch_log\", 1);\n    await craftItem(bot, \"crafting_table\", 1);\n    craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  }\n\n  // Find a suitable position to place the crafting table\n  const placePositionCraftingTable = bot.entity.position.offset(1, -1, 0);\n\n  // Place the crafting table\n  await placeItem(bot, \"crafting_table\", placePositionCraftingTable);\n\n  // Craft an iron pickaxe from the iron ingots and sticks\n  await craftItem(bot, \"iron_pickaxe\", 1);\n}", "description": "async function craftIronPickaxe(bot) {\n    // The function crafts an iron pickaxe by first checking for a furnace in the bot's inventory; if not found, it mines cobblestone to craft one. It then places the furnace and smelts raw iron using coal as fuel. Next, it checks for a crafting table; if absent, it mines a birch log to craft one, placing it afterward. Finally, it crafts an iron pickaxe from iron ingots and sticks.\n}"}, "mineFiveIronOres": {"code": "async function mineFiveIronOres(bot) {\n  // Check if the bot has a stone pickaxe or an iron pickaxe\n  let stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"stone_pickaxe\"].id);\n  let ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_pickaxe\"].id);\n\n  // If the bot doesn't have a stone pickaxe or an iron pickaxe, mine 3 cobblestones and craft a stone pickaxe\n  if (!stonePickaxe && !ironPickaxe) {\n    await mineBlock(bot, \"cobblestone\", 3);\n    await craftItem(bot, \"stone_pickaxe\", 1);\n    stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"stone_pickaxe\"].id);\n  }\n\n  // Mine 5 iron ores\n  for (let i = 0; i < 5; i++) {\n    // Explore until find an iron ore\n    const ironOre = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n      const ironOre = bot.findBlock({\n        matching: mcData.blocksByName[\"iron_ore\"].id,\n        maxDistance: 32\n      });\n      return ironOre;\n    });\n\n    // If an iron ore is found, mine it\n    if (ironOre) {\n      // Equip the stone pickaxe or the iron pickaxe\n      if (stonePickaxe) {\n        await bot.equip(stonePickaxe, \"hand\");\n      } else {\n        await bot.equip(ironPickaxe, \"hand\");\n      }\n\n      // Mine the iron ore\n      await mineBlock(bot, \"iron_ore\", 1);\n      bot.chat(`Mined ${i + 1} iron ores.`);\n    } else {\n      bot.chat(\"No iron ore found within the exploration range.\");\n      break;\n    }\n  }\n}", "description": "async function mineFiveIronOres(bot) {\n    // The function is about mining 5 iron ores using either a stone pickaxe or an iron pickaxe. It first checks if the bot has a stone pickaxe or an iron pickaxe; if not, it mines 3 cobblestones and crafts a stone pickaxe. Then, it iterates through mining 5 iron ores by exploring until finding an iron ore within a certain range. If an iron ore is found, it equips the appropriate pickaxe and mines the iron ore, repeating the process for each of the 5 ores.\n}"}, "craftIronSword": {"code": "async function craftIronSword(bot) {\n  // Find a suitable position to place the crafting table\n  const placePosition = bot.entity.position.offset(1, -1, 0);\n\n  // Place the crafting table\n  await placeItem(bot, \"crafting_table\", placePosition);\n\n  // Craft an iron sword from the iron ingots and sticks\n  await craftItem(bot, \"iron_sword\", 1);\n}", "description": "async function craftIronSword(bot) {\n    // The function crafts an iron sword by first placing a crafting table at a specific position near the bot's entity. Then, it proceeds to craft an iron sword using iron ingots and sticks, resulting in the creation of one iron sword.\n}"}, "craftIronHelmet": {"code": "async function craftIronHelmet(bot) {\n  // Check if the bot has a furnace\n  let furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n\n  // If the bot doesn't have a furnace, mine 8 cobblestone and craft one\n  if (!furnace) {\n    await mineBlock(bot, \"cobblestone\", 8);\n    await craftItem(bot, \"furnace\", 1);\n    furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n  }\n\n  // Find a suitable position to place the furnace\n  const placePositionFurnace = bot.entity.position.offset(2, -1, 0);\n\n  // Place the furnace\n  await placeItem(bot, \"furnace\", placePositionFurnace);\n\n  // Smelt the raw iron using the coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 1);\n\n  // Check if the bot has a crafting table\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n\n  // If the bot doesn't have a crafting table, mine 1 birch log and craft one\n  if (!craftingTable) {\n    await mineBlock(bot, \"birch_log\", 1);\n    await craftItem(bot, \"crafting_table\", 1);\n    craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  }\n\n  // Find a suitable position to place the crafting table\n  const placePositionCraftingTable = bot.entity.position.offset(1, -1, 0);\n\n  // Place the crafting table\n  await placeItem(bot, \"crafting_table\", placePositionCraftingTable);\n\n  // Craft an iron helmet from the iron ingots\n  await craftItem(bot, \"iron_helmet\", 1);\n}", "description": "async function craftIronHelmet(bot) {\n    // The function crafts an iron helmet by first ensuring the availability of a furnace and crafting table. If the bot lacks a furnace, it mines cobblestone to craft one, places it, and then smelts raw iron using coal as fuel. Similarly, if a crafting table is missing, it mines a birch log to craft one and places it. Finally, it crafts an iron helmet from the obtained iron ingots after setting up the necessary crafting infrastructure.\n}"}, "equipIronPickaxe": {"code": "async function equipIronPickaxe(bot) {\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_pickaxe\"].id);\n  await bot.equip(ironPickaxe, \"hand\");\n}", "description": "async function equipIronPickaxe(bot) {\n    // The function equips an iron pickaxe from the bot's inventory to the hand slot for immediate use.\n}"}, "craftIronChestplate": {"code": "async function craftIronChestplate(bot) {\n  // Check if the bot has a furnace\n  let furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n\n  // If the bot doesn't have a furnace, mine 8 cobblestone and craft one\n  if (!furnace) {\n    await mineBlock(bot, \"cobblestone\", 8);\n    await craftItem(bot, \"furnace\", 1);\n    furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n  }\n\n  // Find a suitable position to place the furnace\n  const placePositionFurnace = bot.entity.position.offset(2, -1, 0);\n\n  // Place the furnace\n  await placeItem(bot, \"furnace\", placePositionFurnace);\n\n  // Smelt the raw iron using the coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 3);\n\n  // Check if the bot has a crafting table\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n\n  // If the bot doesn't have a crafting table, mine 1 birch log and craft one\n  if (!craftingTable) {\n    await mineBlock(bot, \"birch_log\", 1);\n    await craftItem(bot, \"crafting_table\", 1);\n    craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  }\n\n  // Find a suitable position to place the crafting table\n  const placePositionCraftingTable = bot.entity.position.offset(1, -1, 0);\n\n  // Place the crafting table\n  await placeItem(bot, \"crafting_table\", placePositionCraftingTable);\n\n  // Craft an iron chestplate from the iron ingots\n  await craftItem(bot, \"iron_chestplate\", 1);\n}", "description": "async function craftIronChestplate(bot) {\n    // The function crafts an iron chestplate by first ensuring the availability of a furnace and a crafting table. If the bot lacks a furnace, it mines cobblestone to craft one, placing it in a suitable position. Then, it smelts raw iron using coal as fuel. Similarly, if a crafting table is missing, the bot mines a birch log to craft one, placing it appropriately. Finally, it crafts an iron chestplate from the obtained iron ingots.\n}"}, "craftIronLeggings": {"code": "async function craftIronLeggings(bot) {\n  // Find a suitable position to place the furnace\n  const placePositionFurnace = bot.entity.position.offset(1, -1, 0);\n\n  // Place the furnace\n  await placeItem(bot, \"furnace\", placePositionFurnace);\n\n  // Smelt the raw iron using the coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 3);\n\n  // Find a suitable position to place the crafting table\n  const placePositionCraftingTable = bot.entity.position.offset(2, -1, 0);\n\n  // Place the crafting table\n  await placeItem(bot, \"crafting_table\", placePositionCraftingTable);\n\n  // Craft an iron leggings from the iron ingots\n  await craftItem(bot, \"iron_leggings\", 1);\n}", "description": "async function craftIronLeggings(bot) {\n    // The function crafts iron leggings by first placing a furnace at a suitable position adjacent to the bot's current location, then smelts raw iron using coal as fuel. Afterward, it places a crafting table at another suitable position near the bot. Finally, it crafts a pair of iron leggings from the smelted iron ingots.\n}"}, "killSheep": {"code": "async function killSheep(bot) {\n  await killMob(bot, \"sheep\", 300);\n}", "description": "async function killSheep(bot) {\n    // The function is about killing sheep in the game. It utilizes another function to target and attack sheep mobs within a range of 300 blocks.\n}"}, "smeltCobblestone": {"code": "async function smeltCobblestone(bot) {\n  // Find a suitable position to place the furnace\n  const placePosition = bot.entity.position.offset(1, -1, 0);\n\n  // Place the furnace\n  await placeItem(bot, \"furnace\", placePosition);\n\n  // Smelt the cobblestone using the coal as fuel\n  await smeltItem(bot, \"cobblestone\", \"coal\", 5);\n}", "description": "async function smeltCobblestone(bot) {\n    // The function is about smelting cobblestone into stone using a furnace. It first finds a suitable position to place the furnace near the bot's current position. Then, it places the furnace at the identified position. After placing the furnace, it proceeds to smelt cobblestone into stone using coal as fuel, smelting a total of 5 cobblestone blocks.\n}"}, "killEnderman": {"code": "async function killEnderman(bot) {\n  // Find the nearest Enderman\n  const enderman = bot.nearestEntity(entity => {\n    return entity.name === \"enderman\" && entity.position.distanceTo(bot.entity.position) < 32;\n  });\n\n  // Equip the iron sword\n  const sword = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_sword\"].id);\n  await bot.equip(sword, \"hand\");\n\n  // Attack the Enderman until it is dead\n  await killMob(bot, \"enderman\", 300);\n}", "description": "async function killEnderman(bot) {\n    // The function is about attacking and killing the nearest Enderman by equipping an iron sword and continuously attacking it until it is dead within a specified time limit.\n}"}, "cookMutton": {"code": "async function cookMutton(bot) {\n  // Find a suitable position to place the furnace\n  const placePosition = bot.entity.position.offset(1, -1, 0);\n\n  // Place the furnace\n  await placeItem(bot, \"furnace\", placePosition);\n\n  // Smelt the mutton using the coal as fuel\n  await smeltItem(bot, \"mutton\", \"coal\", 2);\n}", "description": "async function cookMutton(bot) {\n    // The function is about cooking mutton by placing a furnace at a specific position and then smelting the mutton using coal as fuel.\n}"}, "smeltIronOre": {"code": "async function smeltIronOre(bot) {\n  // Mine 1 block of iron ore\n  await mineBlock(bot, \"iron_ore\", 1);\n\n  // Mine 1 block of coal ore\n  await mineBlock(bot, \"coal_ore\", 1);\n\n  // Find a suitable position to place the furnace\n  const placePosition = bot.entity.position.offset(1, -1, 0);\n\n  // Place the furnace\n  await placeItem(bot, \"furnace\", placePosition);\n\n  // Smelt the iron ore using the coal as fuel\n  await smeltItem(bot, \"iron_ore\", \"coal\", 1);\n}", "description": "async function smeltIronOre(bot) {\n    // The function is about smelting iron ore by first mining 1 block of iron ore and 1 block of coal ore. It then finds a suitable position to place a furnace and proceeds to place the furnace at that location. Finally, it smelts the iron ore using coal as fuel in the placed furnace.\n}"}, "equipIronArmor": {"code": "async function equipIronArmor(bot) {\n  // Equip the iron chestplate\n  const ironChestplate = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_chestplate\"].id);\n  await bot.equip(ironChestplate, \"torso\");\n\n  // Equip the iron leggings\n  const ironLeggings = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_leggings\"].id);\n  await bot.equip(ironLeggings, \"legs\");\n}", "description": "async function equipIronArmor(bot) {\n    // The function equips the bot with iron armor by first finding and equipping the iron chestplate to the torso, then finding and equipping the iron leggings to the legs.\n}"}, "equipIronHelmet": {"code": "async function equipIronHelmet(bot) {\n  const ironHelmet = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_helmet\"].id);\n  await bot.equip(ironHelmet, \"head\");\n}", "description": "async function equipIronHelmet(bot) {\n    // The function equips an iron helmet found in the bot's inventory on the head slot.\n}"}, "mineGoldOre": {"code": "async function mineGoldOre(bot) {\n  // Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_pickaxe\"].id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Explore until find a gold ore\n  const goldOre = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n    const goldOre = bot.findBlock({\n      matching: mcData.blocksByName[\"gold_ore\"].id,\n      maxDistance: 32\n    });\n    return goldOre;\n  });\n\n  // If a gold ore is found, mine it\n  if (goldOre) {\n    await mineBlock(bot, \"gold_ore\", 1);\n    bot.chat(\"Mined 1 gold ore.\");\n  } else {\n    bot.chat(\"No gold ore found within the exploration range.\");\n  }\n}", "description": "async function mineGoldOre(bot) {\n    // The function is about mining a single gold ore block using an iron pickaxe. It equips the iron pickaxe in the hand, then explores the surroundings until finding a gold ore block within a specified range. If a gold ore block is located, it mines the block and notifies the user that one gold ore has been mined; otherwise, it informs that no gold ore was found within the exploration range.\n}"}, "mineFiveCopperOres": {"code": "async function mineFiveCopperOres(bot) {\n  // Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_pickaxe\"].id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Mine 5 copper ores\n  for (let i = 0; i < 5; i++) {\n    await mineBlock(bot, \"copper_ore\", 1);\n    bot.chat(`Mined ${i + 1} copper ores.`);\n  }\n}", "description": "async function mineFiveCopperOres(bot) {\n    // The function equips an iron pickaxe and mines 5 copper ores by iterating through a loop that mines one copper ore at a time, sending a chat message after each successful mining operation to keep track of the progress.\n}"}, "killThreeSheep": {"code": "async function killThreeSheep(bot) {\n  // Equip the iron sword\n  const sword = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_sword\"].id);\n  await bot.equip(sword, \"hand\");\n\n  // Kill 3 sheep\n  for (let i = 0; i < 3; i++) {\n    await killMob(bot, \"sheep\", 300);\n    bot.chat(`Killed ${i + 1} sheep.`);\n  }\n}", "description": "async function killThreeSheep(bot) {\n    // The function equips an iron sword and proceeds to kill three sheep. It iterates three times to kill each sheep, displaying a message after each kill with the number of sheep killed so far.\n}"}, "craftIronBoots": {"code": "async function craftIronBoots(bot) {\n  // Check if the bot has a furnace\n  let furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n\n  // If the bot doesn't have a furnace, mine 8 cobblestone and craft one\n  if (!furnace) {\n    await mineBlock(bot, \"cobblestone\", 8);\n    await craftItem(bot, \"furnace\", 1);\n    furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n  }\n\n  // Find a suitable position to place the furnace\n  const placePositionFurnace = bot.entity.position.offset(1, -1, 0);\n\n  // Place the furnace\n  await placeItem(bot, \"furnace\", placePositionFurnace);\n\n  // Smelt the raw iron using the coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 4);\n\n  // Check if the bot has a crafting table\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n\n  // If the bot doesn't have a crafting table, mine 1 birch log and craft one\n  if (!craftingTable) {\n    await mineBlock(bot, \"birch_log\", 1);\n    await craftItem(bot, \"crafting_table\", 1);\n    craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  }\n\n  // Find a suitable position to place the crafting table\n  let placePositionCraftingTable = bot.entity.position.offset(2, -1, 0);\n\n  // Try to place the crafting table, if it fails, find another position and try again\n  try {\n    await placeItem(bot, \"crafting_table\", placePositionCraftingTable);\n  } catch (error) {\n    placePositionCraftingTable = bot.entity.position.offset(-2, -1, 0);\n    await placeItem(bot, \"crafting_table\", placePositionCraftingTable);\n  }\n\n  // Craft an iron boots from the iron ingots\n  await craftItem(bot, \"iron_boots\", 1);\n}", "description": "async function craftIronBoots(bot) {\n    // The function crafts iron boots by first ensuring the availability of a furnace and crafting table. If the bot lacks a furnace, it mines cobblestone to craft one, then places and uses it to smelt raw iron with coal. Similarly, if a crafting table is missing, it mines birch log to craft one, then places it strategically. Finally, it crafts iron boots from the smelted iron ingots, ensuring the necessary tools and workstations are available for the process.\n}"}, "equipIronBoots": {"code": "async function equipIronBoots(bot) {\n  const ironBoots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_boots\"].id);\n  await bot.equip(ironBoots, \"feet\");\n}", "description": "async function equipIronBoots(bot) {\n    // The function equips iron boots on the bot's feet if they are found in the inventory.\n}"}, "killPig": {"code": "async function killPig(bot) {\n  // Equip the iron sword\n  const sword = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_sword\"].id);\n  await bot.equip(sword, \"hand\");\n\n  // Kill the pig\n  await killMob(bot, \"pig\", 300);\n}", "description": "async function killPig(bot) {\n    // The function equips an iron sword and then proceeds to kill a pig within a time limit of 300 milliseconds.\n}"}, "smeltRawGold": {"code": "async function smeltRawGold(bot) {\n  // Find a suitable position to place the furnace\n  const placePosition = bot.entity.position.offset(1, -1, 0);\n\n  // Place the furnace\n  await placeItem(bot, \"furnace\", placePosition);\n\n  // Smelt the raw gold using the coal as fuel\n  await smeltItem(bot, \"raw_gold\", \"coal\", 1);\n}", "description": "async function smeltRawGold(bot) {\n    // The function is about smelting raw gold into gold ingots using a furnace. It first finds a suitable position to place the furnace, then places the furnace at that position. After placing the furnace, it proceeds to smelt the raw gold into gold ingots using coal as fuel.\n}"}, "craftAndesite": {"code": "async function craftAndesite(bot) {\n  // Check if the bot has a crafting table\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n\n  // If the bot doesn't have a crafting table, mine 1 birch log and craft one\n  if (!craftingTable) {\n    await mineBlock(bot, \"birch_log\", 1);\n    await craftItem(bot, \"crafting_table\", 1);\n    craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  }\n\n  // Find a suitable position to place the crafting table\n  const placePosition = bot.entity.position.offset(1, -1, 0);\n\n  // Place the crafting table\n  await placeItem(bot, \"crafting_table\", placePosition);\n\n  // Check if the bot has 1 diorite and 1 cobblestone\n  let diorite = bot.inventory.findInventoryItem(mcData.itemsByName[\"diorite\"].id);\n  let cobblestone = bot.inventory.findInventoryItem(mcData.itemsByName[\"cobblestone\"].id);\n\n  // If the bot doesn't have 1 diorite, mine it\n  if (!diorite) {\n    await mineBlock(bot, \"diorite\", 1);\n  }\n\n  // If the bot doesn't have 1 cobblestone, mine it\n  if (!cobblestone) {\n    await mineBlock(bot, \"cobblestone\", 1);\n  }\n\n  // Craft the andesite\n  await craftItem(bot, \"andesite\", 1);\n}", "description": "async function craftAndesite(bot) {\n    // The function crafts andesite by first checking for a crafting table in the bot's inventory; if not found, it mines a birch log to craft one. Then, it determines a suitable position to place the crafting table and does so. After that, it checks for 1 diorite and 1 cobblestone in the inventory, mining them if not available. Finally, it crafts 1 andesite block using the gathered resources.\n}"}, "eatCookedMutton": {"code": "async function eatCookedMutton(bot) {\n  // Find the cooked mutton in the bot's inventory\n  const mutton = bot.inventory.findInventoryItem(mcData.itemsByName[\"cooked_mutton\"].id);\n\n  // Equip the cooked mutton\n  await bot.equip(mutton, \"hand\");\n\n  // Consume the cooked mutton\n  await bot.consume();\n}", "description": "async function eatCookedMutton(bot) {\n    // The function is about making the bot eat cooked mutton by finding it in the inventory, equipping it in hand, and then consuming it.\n}"}, "craftIronAxe": {"code": "async function craftIronAxe(bot) {\n  // Find a suitable position to place the crafting table\n  const placePosition = bot.entity.position.offset(1, -1, 0);\n\n  // Place the crafting table\n  await placeItem(bot, \"crafting_table\", placePosition);\n\n  // Craft an iron axe from the iron ingots and sticks\n  await craftItem(bot, \"iron_axe\", 1);\n}", "description": "async function craftIronAxe(bot) {\n    // The function is about crafting an iron axe by first placing a crafting table at a specific position near the bot's entity. Then, it proceeds to craft an iron axe using iron ingots and sticks.\n}"}, "smeltRawCopper": {"code": "async function smeltRawCopper(bot) {\n  // Find a suitable position to place the furnace\n  const placePosition = bot.entity.position.offset(1, -1, 0);\n\n  // Place the furnace\n  await placeItem(bot, \"furnace\", placePosition);\n\n  // Smelt the raw copper using the coal as fuel\n  await smeltItem(bot, \"raw_copper\", \"coal\", 3);\n}", "description": "async function smeltRawCopper(bot) {\n    // The function is about smelting raw copper into ingots using a furnace. It first finds a suitable position to place the furnace, then places the furnace at that position. After placing the furnace, it proceeds to smelt the raw copper using coal as fuel, smelting a total of 3 raw copper items.\n}"}, "craftIronShovel": {"code": "async function craftIronShovel(bot) {\n  // Find a suitable position to place the crafting table\n  const placePosition = bot.entity.position.offset(1, -1, 0);\n\n  // Place the crafting table\n  await placeItem(bot, \"crafting_table\", placePosition);\n\n  // Craft an iron shovel from the iron ingot and stick\n  await craftItem(bot, \"iron_shovel\", 1);\n}", "description": "async function craftIronShovel(bot) {\n    // The function crafts an iron shovel by first placing a crafting table at a specific position near the bot's entity. Then, it proceeds to craft an iron shovel using an iron ingot and a stick, resulting in the creation of one iron shovel.\n}"}, "killOnePig": {"code": "async function killOnePig(bot) {\n  // Equip the iron sword\n  const sword = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_sword\"].id);\n  await bot.equip(sword, \"hand\");\n\n  // Kill the pig\n  await killMob(bot, \"pig\", 300);\n}", "description": "async function killOnePig(bot) {\n    // The function equips an iron sword and kills a pig within a 300-block radius using the `killMob` function.\n}"}, "shearSheep": {"code": "async function shearSheep(bot) {\n  // Check if the bot has shears\n  let shears = bot.inventory.findInventoryItem(mcData.itemsByName[\"shears\"].id);\n  if (!shears) {\n    // Check if the bot has enough iron ingots\n    let iron = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n    if (!iron || iron.count < 2) {\n      // Mine iron ore\n      await mineBlock(bot, \"iron_ore\", 2);\n      // Smelt iron ore into iron ingots\n      await smeltItem(bot, \"iron_ore\", \"coal\", 2);\n    }\n    // Craft shears\n    await craftItem(bot, \"shears\", 1);\n    shears = bot.inventory.findInventoryItem(mcData.itemsByName[\"shears\"].id);\n  }\n\n  // Equip the shears\n  await bot.equip(shears, \"hand\");\n\n  // Find a sheep\n  const sheep = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const sheep = bot.nearestEntity(entity => {\n      return entity.name === \"sheep\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    return sheep;\n  });\n\n  // Approach the sheep and shear it\n  await bot.useOn(sheep);\n}", "description": "async function shearSheep(bot) {\n    // The function is about shearing sheep in the game. It first checks if the bot has shears in the inventory; if not, it ensures there are enough iron ingots to craft shears. If iron is insufficient, it mines iron ore and smelts it into ingots. Then, it crafts shears and equips them. The bot explores the environment to find a sheep within a certain range and shears it upon locating the sheep.\n}"}, "placeChest": {"code": "async function placeChest(bot) {\n  // Find a suitable position to place the chest\n  const placePosition = bot.entity.position.offset(1, -1, 0);\n\n  // Place the chest\n  await placeItem(bot, \"chest\", placePosition);\n}", "description": "async function placeChest(bot) {\n    // The function is about placing a chest at a specific position near the bot's entity. It calculates the position to place the chest by offsetting from the bot's current position. Then, it uses a helper function to actually place the chest at the calculated position.\n}"}, "killCreeper": {"code": "async function killCreeper(bot) {\n  // Check if there is an iron sword in the inventory\n  const sword = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_sword\"].id);\n  if (!sword) {\n    bot.chat(\"I don't have an iron sword to kill the creeper.\");\n    return;\n  }\n\n  // Equip the iron sword\n  await bot.equip(sword, \"hand\");\n\n  // Find the nearest creeper\n  const creeper = bot.nearestEntity(entity => {\n    return entity.name === \"creeper\" && entity.position.distanceTo(bot.entity.position) < 32;\n  });\n  if (!creeper) {\n    bot.chat(\"There is no creeper nearby.\");\n    return;\n  }\n\n  // Kill the creeper\n  await killMob(bot, \"creeper\", 300);\n  bot.chat(\"Killed a creeper!\");\n}", "description": "async function killCreeper(bot) {\n    // The function is focused on killing a creeper using an iron sword. It first checks if there is an iron sword in the inventory; if not, it notifies the unavailability of the sword. Upon finding the sword, it equips the iron sword in hand. The function then locates the nearest creeper within a certain range. If a creeper is found, it proceeds to eliminate the creeper within a specified time frame. Finally, it announces the successful elimination of the creeper.\n}"}, "craftPolishedAndesite": {"code": "async function craftPolishedAndesite(bot) {\n  // Check if the bot has a crafting table\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n\n  // If the bot doesn't have a crafting table, mine 1 oak log and craft one\n  if (!craftingTable) {\n    await mineBlock(bot, \"oak_log\", 1);\n    await craftItem(bot, \"crafting_table\", 1);\n    craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  }\n\n  // Find a suitable position to place the crafting table\n  const placePosition = bot.entity.position.offset(1, -1, 0);\n\n  // Place the crafting table\n  await placeItem(bot, \"crafting_table\", placePosition);\n\n  // Craft the polished andesite\n  await craftItem(bot, \"polished_andesite\", 1);\n}", "description": "async function craftPolishedAndesite(bot) {\n    // The function crafts polished andesite by first checking for a crafting table in the bot's inventory, mining an oak log to craft one if it's not available, then placing the crafting table at a suitable position. Finally, it crafts polished andesite using the crafting table.\n}"}, "craftLightningRod": {"code": "async function craftLightningRod(bot) {\n  // Check if the bot has a crafting table\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n\n  // If the bot doesn't have a crafting table, check if it has a birch log\n  if (!craftingTable) {\n    let birchLog = bot.inventory.findInventoryItem(mcData.itemsByName[\"birch_log\"].id);\n\n    // If the bot doesn't have a birch log, mine one\n    if (!birchLog) {\n      await mineBlock(bot, \"birch_log\", 1);\n    }\n\n    // Craft birch planks from the birch log\n    await craftItem(bot, \"birch_planks\", 1);\n\n    // Craft a crafting table\n    await craftItem(bot, \"crafting_table\", 1);\n    craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  }\n\n  // Find a suitable position to place the crafting table\n  const placePosition = bot.entity.position.offset(1, -1, 0);\n\n  // Place the crafting table\n  await placeItem(bot, \"crafting_table\", placePosition);\n\n  // Move to the crafting table\n  await bot.pathfinder.goto(new GoalGetToBlock(placePosition.x, placePosition.y, placePosition.z));\n\n  // Craft a lightning rod from the copper ingots\n  await craftItem(bot, \"lightning_rod\", 1);\n}", "description": "async function craftLightningRod(bot) {\n    // The function crafts a lightning rod using a crafting table and copper ingots. It first checks if the bot has a crafting table; if not, it checks for a birch log and crafts a crafting table from birch planks. Then, it finds a suitable position to place the crafting table, places it, and moves to the crafting table. Finally, it crafts a lightning rod from copper ingots.\n}"}, "craftShield": {"code": "async function craftShield(bot) {\n  // Find a suitable position to place the crafting table\n  const placePosition = bot.entity.position.offset(1, -1, 0);\n\n  // Place the crafting table\n  await placeItem(bot, \"crafting_table\", placePosition);\n\n  // Craft a shield from the oak planks and iron ingot\n  await craftItem(bot, \"shield\", 1);\n}", "description": "async function craftShield(bot) {\n    // The function is about crafting a shield using a crafting table. It first finds a suitable position to place the crafting table near the bot's entity position. Then, it places the crafting table at the determined position. Finally, it crafts a shield using oak planks and an iron ingot.\n}"}, "killCreeperWithShield": {"code": "async function killCreeperWithShield(bot) {\n  // Check if there is a shield in the inventory\n  const shield = bot.inventory.findInventoryItem(mcData.itemsByName[\"shield\"].id);\n  if (!shield) {\n    bot.chat(\"I don't have a shield to block the creeper's explosion.\");\n    return;\n  }\n\n  // Equip the shield\n  await bot.equip(shield, \"off-hand\");\n\n  // Find the nearest creeper\n  const creeper = bot.nearestEntity(entity => {\n    return entity.name === \"creeper\" && entity.position.distanceTo(bot.entity.position) < 32;\n  });\n  if (!creeper) {\n    bot.chat(\"There is no creeper nearby.\");\n    return;\n  }\n\n  // Kill the creeper\n  await killMob(bot, \"creeper\", 300);\n  bot.chat(\"Killed a creeper with a shield!\");\n}", "description": "async function killCreeperWithShield(bot) {\n    // The function equips a shield to block a creeper's explosion, then locates the nearest creeper within a certain range. If a creeper is found, it proceeds to eliminate the creeper using a shield within a specified time frame, followed by a confirmation message of successfully killing the creeper.\n}"}}